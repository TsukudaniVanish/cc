void error_template_int(char *test_name,int expect , int a)
{
    test_print("\x1b[31merror\x1b[m at");
    test_print(test_name);
    test_print("\n");
    test_print_int(expect);
    test_print(" was expected but got: \x1b[31m");
    test_print_int(a);
    test_print("\x1b[m\n");
    test_error();
}
void test_passed(char *p)
{
    test_print("\x1b[32m");
    test_print(p);
    test_print(" passed!!");
    test_print("\x1b[m\n");
}
int main(){
    test_print("\x1b[32mHello\x1b[m\n"); /* display test */

    int x = 10;

    test_print("variable x initialized : x = ");
    test_print_int(x); /*display int test */
    test_print("\n");

    char* test = "add and sub test";
    x = 20 + 5 - 4;
    if(x != 21)
    {
        error_template_int(test,21,x);
    }
    test_passed(test);

    char *test = "bracket test";
    x = (20 -10)*5;
    if(x != 50)
    {
        error_template_int(test,50,x);
    }
    test_passed("bracket test");

    char *test = "unit + test";
    x = +10;
    if( x != 10)
    {
        error_template_int(test,10,x);
    }
    test_passed("unit + test");

    char *test = "unit - test";
    x = -10;
    if(x != -10)
    {
        error_template_int(test,-10,x);
    }
    test_passed("unit - test passed");

    char *test = "pointer test";
    int x;
    int *y;
    y = &x;
    *y = 3;
    if(x != 3)
    {
        error_template_int(test,3,x);
    }
    test_passed("pointer test passed");

    char *test = "array type cast test";
    int a[2];
    *(a + 1) = 2;
    int *p;
    p = a;
    if(*(p + 1) != 2)
    {
        error_template_int(test,2,*(p+1));
    }
    test_passed("array type cast test");

    char *test = "array index access test";
    int a[2];
    a[1] = 3;
    if(a[1] != 3)
    {
        error_template_int(test,3,a[1]);
    }
    test_passed("array index access test");

	char *test = "increment test";
	int zz = 0;
	zz++;
	if(zz != 1)
	{
		error_template_int(test,1,zz);
	}/*
	test_passed("postfix increment test");
	return 0;*/
	return 0;
}
